#!/usr/bin/env perl
# Cut a video file and output a lossless video file.
# Usage: ff-lossless-cut [OPTIONS...] <in.mkv> <out.mkv> <cut_from> <cut_to>
# cut_from and cut_to are in the format hh:mm:ss[.sss], or "end" for the end of the file.
# Alternatively, the cut points can be specified as a number of seconds.
#
# Options:
#     --afadeout=TIME  Fade out audio over TIME seconds at the end of the cut.
#     --afadein=TIME   Fade in audio over TIME seconds at the start of the cut.
#     --vfadeout=TIME  Fade out video over TIME seconds at the end of the cut.
#     --vfadein=TIME   Fade in video over TIME seconds at the start of the cut.
#     --no-hwaccel     Disable hardware acceleration.
#     --               Stop processing options.
#use local::lib;
use Quote::Code;
use Scalar::Util 'looks_like_number';

sub normalise_time {
    my @parts = split /:/, $_[0];
    my $res = 0;
    $res = $res * 60 + $_ for @parts;
    $res;
}

sub round_3dp {
    sprintf "%.3f", @_;
}

my $pci = qx[lspci];
my $hardware;
if ($pci =~ /AMD.*Radeon/) {
    $hardware = "amd";
} elsif ($pci =~ /NVIDIA.*GeForce/) {
    $hardware = "nvidia";
} else {
    $hardware = "none";
}

my (@afilters, @vfilters);

while ($ARGV[0] =~ /^-/) {
    for ($ARGV[0]) {
        if (/^--afadeout=(.*)$/) {
            my $fadetime = $1;
            push @afilters, sub {
                my ($in, $out, $from, $to) = @_;
                die "Can't fade out unless exact cut points are provided\n"
                    unless looks_like_number($from) && looks_like_number($to);
                my $duration = $to - $from;
                my $fade_start = round_3dp($duration - $fadetime);
                return "afade=t=out:st=$fade_start:d=$fadetime"
            };
        } elsif (/^--afadein=(.*)$/) {
            my $fadetime = $1;
            push @afilters, sub {
                return "afade=t=in:d=$fadetime"
            };
        } elsif (/^--vfadeout=(.*)$/) {
            my $fadetime = $1;
            push @vfilters, sub {
                my ($in, $out, $from, $to) = @_;
                die "Can't fade out unless exact cut points are provided\n"
                    unless looks_like_number($from) && looks_like_number($to);
                my $duration = $to - $from;
                my $fade_start = round_3dp($duration - $fadetime);
                return "fade=t=out:st=$fade_start:d=$fadetime"
            };
        } elsif (/^--vfadein=(.*)$/) {
            my $fadetime = $1;
            push @vfilters, sub {
                return "fade=t=in:d=$fadetime"
            };
        } elsif (/^--no-hwaccel$/) {
            $hardware = "none";
        } elsif (/^--$/) {
            shift;
            last;
        } else {
            die "Bad argument: $_";
        }
    }
    shift;
}

my ($in, $out, $from, $to) = @ARGV;
die "Usage: $0 in.mkv out.mkv cut_from cut_to\n" unless defined $to;

$from = round_3dp normalise_time $from;

my @duration_arg;
if ($to ne 'end') {
    $to = round_3dp normalise_time $to;
    my $duration = round_3dp($to - $from);
    @duration_arg = ('-t', $duration);
}

my @afilters_transformed = map { $_->($in, $out, $from, $to) } @afilters;
my @vfilters_transformed = map { $_->($in, $out, $from, $to) } @vfilters;

if ($hardware eq "amd") {
    push @vfilters_transformed, "format=nv12";
    push @vfilters_transformed, "hwupload";
}

my $vmap = '0:v';
if (@vfilters_transformed) {
    $vmap = '[v]';
}

my $amap = '0:a';
if (@afilters_transformed) {
    $amap = '[a]';
}

my @filters = ();
push @filters, join(",", @vfilters_transformed) . $vmap if @vfilters_transformed;
push @filters, join(",", @afilters_transformed) . $amap if @afilters_transformed;
if (@filters) {
    @filters_transformed = ('-filter_complex', join(";", @filters));
}

my @command = qw/ffmpeg -hide_banner -y -nostdin/;
my @common_out = (qw/-c:a flac -map_chapters -1 -map/, $vmap, '-map', $amap);

my $codec = "hevc";  # h264 is broken somehow on ffmpeg w/ vaapi?

if ($hardware eq "nvidia") {
    push @command, qw/-hwaccel cuda -ss/, $from, @duration_arg, '-i', $in, @filters_transformed, qcw/-c:v {$codec}_nvenc -preset:v lossless -profile:v high444p/, @common_out, $out;
    unshift @command, qw/sem --ungroup --id nvenc -j 2 --fg/;
} elsif ($hardware eq "amd") {
    my @profile = qw/-profile:v high/;
    @profile = () if $codec eq "hevc";
    push @command, qw/-hwaccel vaapi -ss/, $from, @duration_arg, '-i', $in, @filters_transformed, qcw/-c:v {$codec}_vaapi -qp:v 1/, @profile, @common_out, $out;
} else {
    push @command, '-ss', $from, @duration_arg, '-i', $in, @filters_transformed, qcw/-c:v {$codec} -qp:v 0/, @common_out, $out;
}
print STDERR join(" ", @command), "\n";
exec @command;
die "exec ffmpeg failed: $!\n";
