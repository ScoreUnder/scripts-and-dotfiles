#!/usr/bin/env perl
use Scalar::Util 'looks_like_number';

sub normalise_time {
    my @parts = split /:/, $_[0];
    my $res = 0;
    $res = $res * 60 + $_ for @parts;
    $res;
}

sub round_3dp {
    sprintf "%.3f", @_;
}

my @filters;

while ($ARGV[0] =~ /^-/) {
    for ($ARGV[0]) {
        if (/^--afadeout=(.*)$/) {
            my $fadetime = $1;
            push @filters, sub {
                my ($in, $out, $from, $to) = @_;
                die "Can't fade out unless exact cut points are provided\n"
                    unless looks_like_number($from) && looks_like_number($to);
                my $duration = $to - $from;
                my $fade_start = round_3dp($duration - $fadetime);
                return ('-af', "afade=t=out:st=$fade_start:d=$fadetime")
            };
        } elsif (/^--$/) {
            shift;
            last;
        } else {
            die "Bad argument: $_";
        }
    }
    shift;
}

my ($in, $out, $from, $to) = @ARGV;
die "Usage: $0 in.mkv out.mkv cut_from cut_to\n" unless defined $to;

$from = round_3dp normalise_time $from;

my @duration_arg;
if ($to ne 'end') {
    $to = round_3dp normalise_time $to;
    my $duration = round_3dp($to - $from);
    @duration_arg = ('-t', $duration);
}

my @filters_transformed = map { $_->($in, $out, $from, $to) } @filters;

#exec qw/ffmpeg -hide_banner -y -nostdin -hwaccel cuda -ss/, $from, @duration_arg, '-i', $in, @filters_transformed, qw/-c:v h264 -qp:v 0 -c:a flac -map_chapters -1/, $out;
my @final = (qw/ffmpeg -hide_banner -y -nostdin -hwaccel cuda -ss/, $from, @duration_arg, '-i', $in, @filters_transformed, qw/-c:v h264_nvenc -preset:v lossless -profile:v high444p -c:a flac -map_chapters -1/, $out);
unshift @final, qw/sem --ungroup --id nvenc -j 2 --fg/;
exec @final;
die "exec ffmpeg failed: $!\n";
