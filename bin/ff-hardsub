#!/usr/bin/env perl
sub sanitize_ffmpeg_stuff {
    $_[0] =~ s/[\[\]\\,:]/\\$&/g
}

my $scalefirst = 0;
my $pts_offset = 0;
my $video_pipe = 0;
my $use_nvenc = 1;
while (1) {
    if ($ARGV[0] eq '--scale-first') {
        $scalefirst = 1;
    } elsif($ARGV[0] eq '--pts-offset') {
        shift;
        $pts_offset = $ARGV[0];
    } elsif($ARGV[0] eq '--video-pipe') {
        $video_pipe = 1;
    } elsif($ARGV[0] eq '--no-hwenc') {
        $use_nvenc = 0;
    } elsif ($ARGV[0] eq '--') {
        shift; last;
    } else {
        last;
    }
    shift;
}

if ($use_nvenc) {
    if (`ffmpeg -v error -codecs` !~ /\b h264_nvenc \b/x) {
        $use_nvenc = 0;
    }
}

my ($in, $subs, $out, $wxh, @args) = @ARGV;
die 'Pass on the command line: input.mkv subs.ass output.mkv [WIDTHxHEIGHT] [encoder params]' if !$out or !$subs or !$in;
my @default_vcodec = $video_pipe
                        ? (qw/-c:v huffyuv -pix_fmt yuv444p/)
                        : $use_nvenc
                            ? (qw/-c:v h264_nvenc -pix_fmt nv12 -profile:v high -preset:v lossless/)
                            : (qw/-c:v h264 -qp:v 0 -pix_fmt nv12 -preset:v fast/);
#@args = (@default_vcodec, qw/-pix_fmt yuv444p -c:a copy/) unless @args;
@args = (@default_vcodec, qw/-c:a copy/) unless @args;

sanitize_ffmpeg_stuff $subs;

my $hardsub_filter = "subtitles=filename=$subs";

my @vfs;
push @vfs, "setpts=PTS-$pts_offset" if $pts_offset;
push @vfs, $hardsub_filter unless $scalefirst;
if (defined $wxh and $wxh ne 'orig') {
    ($wxh =~ /^(\d+)x(\d+)$/) or die "Not a valid WIDTHxHEIGHT: $wxh\n";
    push @vfs, "scale=w=$1:h=$2";
    if ($2 * 16 == $1 * 9) {
        print "Scaling to a 16:9 aspect ratio.\n";
    } elsif ($2 * 4 == $1 * 3) {
        print "Scaling to a 4:3 aspect ratio.\n";
    } else {
        print "WARNING: Scaled aspect ratio is not exactly 16:9 or 4:3!\n";
    }
}
push @vfs, $hardsub_filter if $scalefirst;
push @vfs, "setpts=PTS+$pts_offset" if $pts_offset;

push @args, qw/-f nut/ if $video_pipe;

my @final = (qw/ffmpeg -hide_banner -y -nostdin -hwaccel cuda -i/, $in, '-vf', join(',', @vfs), @args, qw/-sn/, $out);
unshift @final, qw/sem --ungroup --id nvenc -j 2 --fg/ if $use_nvenc;
print STDERR join(' ', @final), "\n";
exec @final;
die "Failed exec: $!";
