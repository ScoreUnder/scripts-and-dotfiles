#!/usr/bin/env perl
# Hardsub a video file using an ASS subtitle file.
# Usage: ff-hardsub [OPTIONS...] <input.mkv> <input.ass> <output.mkv> [WIDTHxHEIGHT] [encoder params]
# Options:
#   --scale-first           Scale the video first, then hardsub. Useful for videos with a small resolution that want crisp subs.
#                           By default, the video is hardsubbed first, then scaled. This is better for videos with a large resolution.
#   --pts-offset <seconds>  Offset the PTS by this many seconds. Lets you re-sync the video with the subs without editing the sub file.
#   --video-pipe            Output a raw video stream to stdout. Useful for piping to other programs.
#   --no-hwenc              Don't use hardware encoding (here for portability, it doesn't have many actual advantages).
#   --map <stream>          Pass through the given stream. Can be used multiple times. Same as ffmpeg -map.
#   --                      End of options.
#use local::lib;
use Quote::Code;
sub sanitize_ffmpeg_stuff {
    $_[0] =~ s/[\[\]\\,:]/\\$&/g
}

my $scalefirst = 0;
my $pts_offset = 0;
my $video_pipe = 0;
my $use_nvenc = 1;
my @maps;
while (1) {
    if ($ARGV[0] eq '--scale-first') {
        $scalefirst = 1;
    } elsif($ARGV[0] eq '--pts-offset') {
        shift;
        $pts_offset = $ARGV[0];
    } elsif($ARGV[0] eq '--video-pipe') {
        $video_pipe = 1;
    } elsif($ARGV[0] eq '--no-hwenc') {
        $use_nvenc = 0;
    } elsif ($ARGV[0] eq '--map') {
        shift;
        push @maps, split /[\s,]+/, $ARGV[0];
    } elsif ($ARGV[0] eq '--') {
        shift; last;
    } else {
        last;
    }
    shift;
}

if ($use_nvenc) {
    if (`ffmpeg -v error -codecs` !~ /\b h264_nvenc \b/x) {
        $use_nvenc = 0;
    }
}

my ($in, $subs, $out, $wxh, @args) = @ARGV;
die 'Pass on the command line: input.mkv subs.ass output.mkv [WIDTHxHEIGHT] [encoder params]' if !$out or !$subs or !$in;
my $codec = "hevc";  # h264 is broken somehow on ffmpeg w/ vaapi?
my $profile = $use_nvenc ? "main" : "main444-8";
my @default_vcodec = $video_pipe
                        ? (qw/-c:v huffyuv -pix_fmt yuv444p/)
                        : $use_nvenc
                            ? (qcw/-c:v {$codec}_vaapi -qp:v 1 -preset:v veryslow -profile:v {$profile}/)
                            : (qcw/-c:v {$codec} -qp:v 0 -preset:v fast -profile:v {$profile}/);
#@args = (@default_vcodec, qw/-pix_fmt yuv444p -c:a copy/) unless @args;
@args = (@default_vcodec, qw/-c:a copy/) unless @args;

sanitize_ffmpeg_stuff $subs;

my $hardsub_filter = "subtitles=filename=$subs";

my @vfs;
push @vfs, "setpts=PTS-$pts_offset" if $pts_offset;
push @vfs, $hardsub_filter unless $scalefirst;
push @vfs, "format=nv12", "hwupload" if !$scalefirst && $use_nvenc;
push @vfs, "format=yuv444p" if !$use_nvenc;
if (defined $wxh and $wxh ne 'orig') {
    ($wxh =~ /^(\d+)x(\d+)$/) or die "Not a valid WIDTHxHEIGHT: $wxh\n";
    push @vfs, "scale_vaapi=w=$1:h=$2" unless $scalefirst || !$use_nvenc;
    push @vfs, "scale=w=$1:h=$2" if $scalefirst || !$use_nvenc;
    if ($2 * 16 == $1 * 9) {
        print "Scaling to a 16:9 aspect ratio.\n";
    } elsif ($2 * 4 == $1 * 3) {
        print "Scaling to a 4:3 aspect ratio.\n";
    } else {
        print "WARNING: Scaled aspect ratio is not exactly 16:9 or 4:3!\n";
    }
}
push @vfs, $hardsub_filter if $scalefirst;
push @vfs, "format=nv12", "hwupload" if $scalefirst && $use_nvenc;
push @vfs, "setpts=PTS+$pts_offset" if $pts_offset;

push @args, qw/-f nut/ if $video_pipe;

@maps = map { ('-map', $_) } @maps;

# removed: -hwaccel vaapi
# because hardware accelerated decode can also cause bugs :/
# mpv does it fine tho...
my @final = (qw/ffmpeg -hide_banner -y -nostdin -init_hw_device vaapi=vaapi:\/dev\/dri\/renderD128 -i/, $in, '-vf', join(',', @vfs), @maps, @args, qw/-sn/, $out);
#unshift @final, qw/sem -q --ungroup --id nvenc -j 2 --fg/ if $use_nvenc;
print STDERR join(' ', @final), "\n";
exec @final;
die "Failed exec: $!";
