#!/bin/sh
# Re-encode a directory of music files to Opus. I use this for putting music on my phone.
# Usage: reencode-music <dir> [<dir> ...]
# Creates a new directory of the same name under the current working directory with the re-encoded files inside.
_prog_name=${0##*/}
die() { printf "%s: %s\n" "$_prog_name" "$*" >&2; exit 1; }
[ "$#" != 0 ] || die "Need a dir to transcode"

reencode_file() {
    file=$1
    dir=$2
    base=${dir##*/}
    fbase=${file##*/}
    mydir=$base/${file%/*}
    existing_file="$dir/$file"
    new_file="$mydir/$fbase"

    case ${fbase##*.} in
        (flac|mp3|m4a|wav) new_file="${new_file%.*}.opus";;
    esac

    [ "$existing_file" -ot "$new_file" ] && return

    mkdir -p -- "$mydir"

    case ${fbase##*.} in
        (flac|mp3|m4a|wav) exec ffmpeg -hide_banner -nostdin -y -loglevel warning -i "$existing_file" -c:a libopus -b:a 128k -vn "$new_file";;
        (m3u|m3u8|fpl|cue|log|part) ;;  # skip
        (*) exec cp -r --reflink=auto "$existing_file" "$new_file";;
    esac
}

exec </dev/null

if [ "$1" = --single-internal ]; then
    shift
    reencode_file "$@"
    exit
fi

for dir do
    [ -r "$dir" ] || die "No read access: $dir"
    [ -d "$dir" ] || die "Not a directory: $dir"
    mkdir -p -- "${dir%%*/}"
    ( cd -- "$dir" && find -L . -mindepth 1 \! -type d ) | parallel -q --bar "$0" --single-internal {} "$dir"
    result=$?
    if [ "$result" -ne 0 ]; then
        printf 'Parallel died with exit code %s when processing dir %s\n' "$result" "$dir" >&2
    fi
done
